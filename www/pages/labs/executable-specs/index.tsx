import { NextPage } from "next";

export const Page: NextPage = () => (
    <main>
        <h1>Executable specifications</h1>

        <h2>Преамбула</h2>
        <p>
            Постоянно создаётся ощущение, что область ИТ наименее автоматизированная из всех. Когда банки
            уже вовсю использовали преимущества ИТ-продуктов, их разработчики даже ещё и не подошли к
            автоматизации своих собственных процессов и DevOps ещё только в планах.
        </p>
        <p>
            Данное исследование попробует исследовать концепцию подхода, когда разработка решения начинается
            с мета-программы, отвечающей за все аспекты этого решения. Фактически, единый управляющий центр.
            Она позволит его описать в таком виде, какой не всегда доступен в рамках конечного приложения.
        </p>

        <h2>XDE Team Server</h2>
        <p>
            В качестве примера для экспериментов будет использоваться приложение XDE Team Server
            предназначеное для управления ресурсами и координации как внутри XDE.Team, так и любой
            другой команды.
        </p>

        <p>
            Для начала создадим .NET проект с консольным приложением Xde.Specs. Он и будет
            отвечать на всё наши вопросы.
        </p>

        <code className="block">
            <ins>dotnet new sln -n Xde</ins>
            <ins>dotnet new console -n Xde.Specs</ins>
            <ins>dotnet sln Xde.sln add Xde.Specs</ins>
        </code>

        <p>
            Здесь стоит отметить, что хоть речь идёт о приложении XDE Team Server, сам сервер отвечает
            только за хостинг внутри себя самого разнообразного функционала. Последний может быть
            использован далее и в связке с другими приложениями и решениями. Поэтому пространство имён
            намеренно расширено до максимума и в Xde.Specs.csproj можно это явно указать:
        </p>

        <code className="block">
            <ins>...</ins>
            <ins>&lt;RootNamespace&gt;Xde&lt;/RootNamespace&gt;</ins>
            <ins>...</ins>
        </code>

        <p>
            Дальше, с точки зрения пространств имён всё есть фичи приложения. В качестве примера выделим
            две подпространства - Schedule для планирования задач и Flow для управления потоками (в том числе
            - документооборота).
        </p>

        <h2>InBox</h2>
        <p>
            Specs - это метапрограммирование. Вы пишете программу, которая будет управлять всеми
            остальными программами и артефактами, составляющими решение. Своеобразный SaaC
            (Solution-as-a-Code).
        </p>
        <p>
            Эта идея появилась самостоятельно, но хорошо коннектится с идеей Cx.
        </p>
        <p>
            В спеках могут быть папки Infrastructure, Features и т.п.
        </p>
        <p>
            Пример решения, когда я Gherkin-спецификации синхронизировал с Confluence.
        </p>
        <p>
            В Specs можно добавить генерацию документации и веб-сервер для её демонстрации.
        </p>
    </main>
);

export default Page
